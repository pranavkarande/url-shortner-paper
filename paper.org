# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+TITLE: Feature-Rich URL Shortner
#+AUTHOR: Pranav Karande

#+STARTUP: overview indent
#+LANGUAGE: pt-br
#+OPTIONS: H:3 creator:nil timestamp:nil skip:nil toc:nil num:t ^:nil ~:~
#+OPTIONS: author:nil title:nil date:nil
#+TAGS: noexport(n) deprecated(d) ignore(i)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+LATEX_CLASS: ELSEVIER
#+LATEX_CLASS_OPTIONS: [final,12pt]
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LATEX_HEADER: \usepackage{lineno}
#+LATEX_HEADER: \linenumbers
#+LATEX_HEADER: \modulolinenumbers[1]
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{hyperref,xspace}
#+LATEX_HEADER: \usepackage[tight,footnotesize]{subfigure}
#+LATEX_HEADER: \usepackage{tabularx}

# You need at least Org 9 and Emacs 24 to make this work.
# If you do, just type make (thanks Luka Stanisic for this).
# You'll also need to install texlive-publishers to get acmart.cls

* Elsevier configuration for org export + ignore tag (Start Here)  :noexport:

#+begin_src emacs-lisp :results output :session :exports both
(add-to-list 'load-path ".")
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))
(add-to-list 'org-latex-classes
             '("ELSEVIER"
               "\\documentclass{elsarticle}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

#+RESULTS:

* *The Paper*                                                       :ignore:
** Latex configurations                                             :ignore:
#+BEGIN_EXPORT latex
\journal{VIT}
#+END_EXPORT
** Frontpage                                                        :ignore:
*** Authors and Affiliations                                       :ignore:
#+BEGIN_EXPORT latex
%% use the tnoteref command within \title for footnotes;
%% use the tnotetext command for theassociated footnote;
%% use the fnref command within \author or \address for footnotes;
%% use the fntext command for theassociated footnote;
%% use the corref command within \author for corresponding author footnotes;
%% use the cortext command for theassociated footnote;
%% use the ead command for the email address,
%% and the form \ead[url] for the home page:
%% \title{Title\tnoteref{label1}}
%% \tnotetext[label1]{}
%% \author{Name\corref{cor1}\fnref{label2}}
%% \ead{email address}
%% \ead[url]{home page}
%% \fntext[label2]{}
%% \cortext[cor1]{}
%% \address{Address\fnref{label3}}
%% \fntext[label3]{}

\author{Pranav Karande}
\author{Krishap S Sreenivasan}
\author{Tejas Mahajan}
\author{Utkarsh Tikkiwal}

\address{
VIT, Vellore Campus, Tiruvalam Rd, Katpadi, Vellore, Tamil Nadu 632014
}
#+END_EXPORT

*** Abstract                                                       :ignore:

#+LaTeX: \begin{abstract}

URLs can get long, unattractive, and break when sent via e-mail. To shorten an Internet address, we proposed a secure URL shortening service which will take a long Web address and create a shorter address. Most of the approaches proposed for classifying malicious URLs utilize information from both social networks and URL shorting service providers. In this paper, we propose a novel approach to detect malicious short URLs by focussing on outliers in existing implementations. This is achieved by taking user feedback into account.

#+LaTeX: \end{abstract}

*** Graphical Abstract                                             :ignore:

#+latex: %\begin{graphicalabstract}

# Graphical Abstract

#+latex: %\end{graphicalabstract}

*** Research Highlights                                            :ignore:

#+latex: %\begin{highlights}

# \item Research highlight 1
# \item Research highlight 2

#+latex: %\end{highlights}

*** Keywords                                                       :ignore:

#+latex: \begin{keyword}

#+BEGIN_EXPORT latex
%% keywords here, in the form: keyword \sep keyword
URL shortner \sep Spam Detection \sep User Feedback \sep Cassandra \sep PostgreSQL
%% PACS codes here, in the form: \PACS code \sep code

%% MSC codes here, in the form: \MSC code \sep code
%% or \MSC[2008] code \sep code (2000 is the default)
#+END_EXPORT

#+latex: \end{keyword}
*** Maketitle                                                      :ignore:
#+LaTeX: \maketitle
** Introduction

URL shortening is a technique that allows you to significantly shorten your Uniform Resource Locator (URL) and still access the desired page directly. This is achieved by using a redirect which links to the web page that has a long URL. The proposed secure URL shortening service will give the user more trust to use the service with security, availability, and confidentiality consideration. A shortened URL can be used in messaging technologies which limit the number of letters, for making it easier for one to remember it, for reducing the amount of typing if someone is manually copying the URL and can be used for permalinks So they save space and make manual entry of URL easier. Some URL shortening service providers are listed on spam block lists because their redirect services are used by websites trying to bypass spam block lists. Some URL shortening service providers have found themselves on spam blocklists, because of the use of their redirect services by sites trying to bypass those very same blocklists. Some popular websites like Twitter allow only 140-character tweet to be posted on their platform. So given the limit on the length of the tweet URL shortener have become very popular method to share links on Twitter. A Popular URL shortening site is bit.ly which convert long URL into smaller ones. However, the technology has also attracted spammers. . They utilize the URL Shorteners to camouflage their spam links, enabling the spammers to hide the true domain of the URL. Our goal is to provide a safe URL shortening service that allows users to report malicious links that spread spam and malware in which we delete and block these shortened links and avoid the distribution of these inappropriate links which contain malware.

# ** Background and Experimental Context
# \label{sec.context}
# *** Background
# \label{sec.background}
# *** Experimental Context and Workload Details
# \label{sec.setup}
** Related Work and Motivation

[[./Screenshot_20221107_101754.png]]
[[./Screenshot_20221107_101959.png]]
[[./Screenshot_20221107_102217.png]]
[[./Screenshot_20221107_102253.png]]

# ** Your Great Contribution to Computer Science
# \label{sec.proposal}
# ** Your Super Results

** ER Diagram
[[./WhatsApp Image 2022-09-21 at 9.02.28 AM(1).jpeg]]

** SQL Queries
*** PostgreSQL
**** User Login SQL command
SELECT users.id AS users_id, users.username AS users_username, users.email AS users_email, users.hashed_password AS users_hashed_password, users.is_active AS users_is_active, users.is_admin AS users_is_admin
**** Register User SQL command
INSERT INTO users (username, email, hashed_password, is_active, is_admin) VALUES (%(username)s, %(email)s, %(hashed_password)s, %(is_active)s, %(is_admin)s) RETURNING users.id
**** Create Complaint
INSERT INTO complaints (link_id, body, status) VALUES (%(link_id)s, %(body)s, %(status)s) RETURNING complaints.id
**** Get Complaints
SELECT complaints.id AS complaints_id, complaints.link_id AS complaints_link_id, complaints.body AS complaints_body, complaints.status AS complaints_status
*** Cassandra
**** Create a keyspace
CREATE KEYSPACE IF NOT EXISTS url_shortener WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : '1' };
**** Create a table
CREATE TABLE IF NOT EXISTS url_shortener.urls (
key text PRIMARY KEY,
reference text,
owner_id int,
action text,
is_active boolean
);
**** Create link
INSERT INTO urls (key, reference, action, owner_id, is_active) VALUES (?,?,?,?,?);
**** Get link by key
SELECT * FROM urls WHERE key = ? ;
** Conclusion
Using efficient algorithms that also consider user input, we have successfully built an efficient URL shortening service that prioritizes spam, phishing, and malware detection. We have focused on outliers in existing implementations. H. URLs that are considered safe but are actually malicious, or vice versa. The proposed secure URL shortening service allows users to use the service with more confidence, keeping security, availability and confidentiality in mind. Users can report malicious links that spread spam and malware which gets removed and blocked to prevent their spread.
# ** Acknowledgments                                                  :ignore:

# #+LATEX:\section*{Acknowledgements}

# Who paid for this?

# ** References                                                        :ignore:
